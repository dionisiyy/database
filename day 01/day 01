# Day 01 - Piscine SQL
Exercise 00 - Let’s make UNION dance

Please write a SQL statement which returns menu’s identifier and pizza names from menu table and person’s identifier and person name from person table in one global list (with column names as presented on a sample below) ordered by object_id and then by object_name columns.

```sql
SELECT 
    id AS object_id, 
    pizza_name AS object_name
FROM 
    menu 

UNION 

SELECT 
    id AS object_id, 
    name AS object_name
FROM 
    person 

ORDER BY 
    object_id, 
    object_name;
```



Exercise 01 - UNION dance with subquery

Please modify a SQL statement from “exercise 00” by removing the object_id column. Then change ordering by object_name for part of data from the person table and then from menu table (like presented on a sample below). Please save duplicates!

object_name
Andrey
Anna
...
cheese pizza
cheese pizza
...

```sql
SELECT object_name FROM (
	SELECT 
		name AS object_name,
		1 AS type
	FROM 
		person

	 UNION ALL
	SELECT 
		pizza_name AS object_name,
		2 AS type
	FROM 
		menu
) tab
ORDER BY type, object_name
	
```


Exercise 02 - Duplicates or not duplicates

SQL Syntax Construction	DISTINCT, GROUP BY, HAVING, any type of JOINs
Please write a SQL statement which returns unique pizza names from the menu table and orders them by pizza_name column in descending mode. Please pay attention to the Denied section.

```sql
SELECT 
    pizza_name 
FROM 
    (SELECT 
        pizza_name, 
        ROW_NUMBER() OVER (PARTITION BY pizza_name ORDER BY pizza_name) as rn 
     FROM 
        menu) as subquery 
WHERE 
    rn = 1;
```


Exercise 03: “Hidden” Insights	

Denied	
SQL Syntax Construction	any type of JOINs
Please write a SQL statement which returns common rows for attributes order_date, person_id from person_order table from one side and visit_date, person_id from person_visits table from the other side (please see a sample below). In other words, let’s find identifiers of persons, who visited and ordered some pizza on the same day. Actually, please add ordering by action_date in ascending mode and then by person_id in descending mode.
```sql
SELECT 
    order_date AS action_date, 
    person_id 
FROM 
    person_order 
WHERE 
    person_id IN (SELECT person_id FROM person_visits WHERE visit_date = order_date)

UNION

SELECT 
    visit_date AS action_date, 
    person_id 
FROM 
    person_visits

ORDER BY 
    action_date ASC, 
    person_id DESC;
```




Exercise 04 - Difference? Yep, let's find the difference between multisets.

Denied	
SQL Syntax Construction	any type of JOINs

Please write a SQL statement which returns a difference (minus) of person_id column values with saving duplicates between person_order table and person_visits table for order_date and visit_date are for 7th of January of 2022
```sql
SELECT 
    person_id 
FROM 
    person_order 
WHERE 
    order_date = '2022-01-07'


EXCEPT ALL

SELECT
    person_id 
FROM 
    person_visits 
WHERE 
    visit_date = '2022-01-07';
```


Exercise 05: Did you hear about Cartesian Product?	

Please write a SQL statement which returns all possible combinations between person and pizzeria tables and please set ordering by person identifier and then by pizzeria identifier columns. Please take a look at the result sample below. Please be aware column's names can be different for you.



```sql
SELECT 
    p.id AS person_id,
    p.name AS person_name,
    p.age,
    p.gender,
    p.address,
    piz.id AS pizzeria_id,
    piz.name AS pizzeria_name,
    piz.rating
FROM 
    person p
CROSS JOIN 
    pizzeria piz
ORDER BY 
    p.id, piz.id;

```



Exercise 06 - Lets see on “Hidden” Insights

Let's return our mind back to exercise #03 and change our SQL statement to return person names instead of person identifiers and change ordering by action_date in ascending mode and then by person_name in descending mode. Please take a look at a data sample below.

```sql
SELECT 
    po.order_date AS action_date, 
    p.name 
FROM 
    person_order po
JOIN 
    person p ON po.person_id = p.id
WHERE 
    po.person_id IN (SELECT pv.person_id FROM person_visits pv WHERE pv.visit_date = po.order_date)

UNION

SELECT 
    pv.visit_date AS action_date, 
    p.name 
FROM 
    person_visits pv
JOIN 
    person p ON pv.person_id = p.id

ORDER BY 
    action_date ASC, 
    name DESC;
```

Exercise 07 - Just make a JOIN

Please write a SQL statement which returns the date of order from the person_order table and corresponding person name (name and age are formatted as in the data sample below) which made an order from the person table. Add a sort by both columns in ascending mode.

```sql
SELECT 
    po.order_date AS order_date, 
    CONCAT(p.name, ' (', p.age, ' years old)') AS person_info
FROM 
    person_order po
JOIN 
    person p ON po.person_id = p.id
ORDER BY 
    po.order_date ASC, 
    p.name ASC;
```

Exercise 08 - Migrate JOIN to NATURAL JOIN

Denied	
SQL Syntax Construction	other type of JOINs
Please rewrite a SQL statement from exercise #07 by using NATURAL JOIN construction. The result must be the same like for exercise #07.

```sql
SELECT 
    po.order_date AS order_date, 
    (SELECT CONCAT(p.name, ' (', p.age, ' years old)') 
     FROM person p 
     WHERE p.id = po.person_id) AS person_info
FROM 
    person_order po
ORDER BY 
    po.order_date ASC, 
    (SELECT p.name FROM person p WHERE p.id = po.person_id) ASC;
```


Exercise 09 - IN versus EXISTS

Please write 2 SQL statements which return a list of pizzerias names which have not been visited by persons by using IN for 1st one and EXISTS for the 2nd one.
```sql
SELECT name
FROM pizzeria
WHERE id NOT IN (
    SELECT DISTINCT pizzeria_id
    FROM person_visits
);

```



```sql
SELECT name
FROM pizzeria p
WHERE NOT EXISTS (
    SELECT 1
    FROM person_visits v
    WHERE v.pizzeria_id = p.id
);
```




Exercise 10: Global JOIN	

Please write a SQL statement which returns a list of the person names which made an order for pizza in the corresponding pizzeria. The sample result (with named columns) is provided below and yes ... please make ordering by 3 columns (person_name, pizza_name, pizzeria_name) in ascending mode.

person_name	pizza_name	pizzeria_name
Andrey	cheese pizza	Dominos
Andrey	mushroom pizza	Dominos
Anna	cheese pizza	Pizza Hut
...	...	...

```sql
SELECT 
    p.name,
    m.pizza_name,
    pi.name
FROM 
    person p
INNER JOIN
    person_order po ON p.id = po.person_id
INNER JOIN 
    menu m ON po.menu_id = m.id
INNER JOIN 
    pizzeria pi ON m.pizzeria_id = pi.id
ORDER BY 
    p.name ASC,
    m.pizza_name ASC,
    pi.name ASC;
```
